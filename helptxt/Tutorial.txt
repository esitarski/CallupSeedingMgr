[TOC]

# Tutorial

## Introduction
__CallupSeedingMgr__ makes it easy to create a __Callup__ or __Seeding__ sequence for a race.
It can do it in seconds and save hours of error-prone work.

__CallupSeedingMgr__ processes a spreadsheet with the registration and callup/seeding criteria rather than keeping the data itself.  This makes it easy as you likely have this information in Excel anyway (or can get it there).

In this tutorial, we will be using an input spreadsheet automatically generated by the __CallupSeedingMgr__ program.
If you don't have it, start the tutorial from __CallupSeedingMgr__ and it will generate one and open it for you.

We are doing callups, that is, we want the highest ranked rider to be first in the list.

If you are doing seeding for a time trial, you want the highest ranked rider to go last.  This is easily accomplished by selecting the __Seeding: Highest ranked LAST (Time Trial)__ option (more on that later).

__CallupSeedingMgr__ handles any number of callup/seeding criteria.  In this example, we are going to use 3 criteria to control the callups:

1. by __UCI Points__
1. if tied (or don't have any), then by __National Points__
1. if tied (or don't have any), then by __Results from Last Year's Race__

The goal is to get a sequence by driven by these criteria.  For riders with no criteria, we want them in random order.

Of course, in your own race you will configure a spreadsheet with your own data.

In a nutshell, __CallupSeedintMgr__ does the following:

    For each rider in Registration:
        For each Criteria sheet in the spreadsheet:
            Match the rider's information to a criteria row based on some common column header data
            If successful, append the criteria's Points or Position to the vector
            If unsuccessful, append an appropriate default value (zero points or infinite position)
    Sort all the rider vectors

Vectors are sorted in [Lexographic Order](http://en.wikipedia.org/wiki/Lexicographical_order) for callups, reversed for seeding.

# Structure of the Input Excel File

Take a moment and look at the example spreadsheet.  You will be configuring a similar sheet for your race, but different for your race particulars.  Let's start by looking at the __Sheets__ at the bottom of the screen.

## Registration Sheet

Click on the __Registration__ sheet to select it.

This specifies the riders that are registered for the race.
Normally this is the first sheet in the Excel file, but it doesn't have to be.
However, there must be exactly one sheet named __Registration__.

The __Registration__ sheet should include as much information as you have about the competitors.
For example, it might look something like this:

Bib|First Name|Last Name|UCI Code|License|Team
:--|:---------|:--------|:-------|:------|:---
...|...|...|...|...|...
...|...|...|...|...|...

A full list of __CallupSeedingMgr__ recognized fields can be found [here](#column-header-fields).

Observe that the header row __must__ be the first row, and there are no blank lines.
This must be true of all the sheets in the Excel file.  When you create your own sheet, follow the example format.

Notes:

* It's OK if you have fields not recognized by __CallupSeedingMgr__.  It will ignore them.
* You do not need Bib numbers as they are not used for matching.  Include them if you do, leave them off if you don't have them.
* Columns can be in any order.

In a real-life race, try to get First Name, Last Name, UCI Code and License.
This will allow you to add just about any other criteria.

## Criteria Sheets

__Criteria__ sheets contain the information used for the ranking.  In the example, these are __UCI Points, National Points and Last Year's Results__.

It is OK if the criteria sheets contain information for other riders that are not in your race.  For example, you might have the entire UCI points standings in a sheet.  However, only the records matching your __Registration__ will be used.

The sheets must be in the same order in Excel as you want the criteria applied.

### Criteria Sheet Data

__Criteria__ sheets contain a __Value__ field used for the ranking, and __Matching__ fields used to find the competitor from __Registration__.

The __Value__ field is simple.  There are two recognized names:

1. Points
1. Position

__Points__ are considered in __decreasing__ order (more points = higher rank).  __Position__ is considered in __increasing__ order (lower position = higher rank).

Click on the __National Points__ sheet.  Notice the __Points__ column.

Click on the __Last Year's Results__ sheet.  Notice the Position column.

Click on the __UCI Points__ sheet.  Notice that it has both:

* If your sheet has both a __Points__ and __Position__ field, the __Position__ field will be used.
* If your sheet does not have either a __Points__ or __Position__ field then a __Position__ will automatically be assigned equal to the row number in the sheet.

Other than the __Value__ field, the __Matching__ fields are used to match the criteria to a rider in __Registration__.

## Using CallupSeedingMgr

Return to the __CallupSeedingMgr__ window.  The Excel file is at the top, the options are next.  A summary of the fields per sheet is next,  The callup results are below in a the big table, and below that are the options to send the output to Excel.

__CallupSeedingMgr__ has already computed the callups and put the results in the big grid.

Scroll the big grid.  Notice how the riders with the most __UCI Points__ are ranked first, followed by __National Points__, followed by __Last Year's Results__, just as we want.

### Get Explanation for Criteria

In the big grid, find a cell with a criteria number in it (perhaps in the __National Points__ column).  Click on it.

The display shows you the __Registration__ entry and the __Criteria__ entry used to get the value.
It also includes the row number in the sheet, which makes it easy of you need to fix up your data.

If you get a wrong match and you need to change some data in the Excel sheet, save it, then press the __Update__ button to see the new values.

Sometimes you will see Orange or Yellow cells in the grid.  Orange cells indicate multiple matches, with the number of stars showing the number of matches.  If you click on those cells, you will see all the records that matched.

Multiple matches are most commonly caused by Soundalike matches.  To fix these problems, make the first and last name spelling consistent for the rider in all sheets in Excel.  When you are done, save the sheet, the press __Update__.

A single match that was a result of a Soundalike match is shown in Yellow.  

### Manually Editing the Sequence

You can manually edit the entries in the grid.  Press and hold the left-mouse button on the row numbers on the left, and drag the rider to another row.  For example, let's say for some reason you wanted to move the 3rd ranked rider to the 1st position.  Try to drag-and-drop this now.

### Change from Callups to Seeding

The program shows Callup order, that is, the highest ranked riders first.  Try selecting the "Seeding" option (to the left of the Update button).  Then press "Update".

Notice that now the riders are in the opposite sequence from Callup order.  Of course, you can manually change the sequence by drag-and-drop (this is useful if you want to separate riders on the same team).

## Saving Ouput to Excel

When you are satisfied with your sequence, press the __Save as Excel...__ button.  This will create a separate Excel file with the same name as your original file, with "_Callups" or "_Seeding" added to the name.

You can edit the output file directly in Excel if you like.

There are two output options:

1. __Exclude riders with no ranking info__ will exclude riders with no points or position criteria.  This is intended if you only want to call up the top riders with ranking information.
1. __Output__ allows you to control the top number of riders you want in the call-ups.  You almost always want to use this with the __Exclude riders with no ranking info__ option, so make sure you set them both.

For Time Trial Seeding applications, you will not use these options.

That's it!  YCreate callups in no time with multiple criteria.

# Criteria Matching

__Registration__ rows are matched with __Criteria__ rows as follows:

1. If both __Registration__ and the __Criteria__ sheet contain a __License__ column, the licenses will be used and must match exactly.  No other matching criteria are considered in this case.  This is the most reliable way to match registration with criteria.
1. If both __Registration__ and the __Criteria__ sheet contain __First Name__, __Last Name__ and __UCI Code__ - and everything matches exactly - that is considered a match.
1. If still no match, then the Soundalike process is used on the First and Last names.
1. If the sheets only contains __First Name__ and __Last Name__ fields, they are checked for both exact and soundalike match.

Soundalike matches are not performed if the "Match misspelled names with Soundalike" is unchecked.

For more details see [Matching Issues](#matching-issues).

To see exactly what columns __CallupSeedingMgr__ is matching on, see the __Match Columns__ column in the summary.  For example, the __Registration__ sheet has a __License__ field and the __National Points__ sheet has a __License__ filed.  By the above rules, the records are matched on the __License__ field.

# Getting UCI Points Data

It is important to get the most up-to-date UCI points data for your race.  The following instructions tell you how to get the points data from the UCI and put it into a spreadsheet that __CallupSeedingMgr__ can work with.

1. Launch Excel.  Ensure you have a sheet called "UCI Points" in your input spreadsheet (create one if there isn't).  If you are doing the ranking by UCI points first, make sure this is the first sheet.  If you are updating the points in an existing spreadsheet, make sure you have deleted the previous UCI data.
1. In a web browser (Chrome, Firefox, Explorer, etc) go to the [UCI Site](www.uci.ch)
1. Pick the race discipline you need.
1. Then choose __Rankings__
1. On the upper left, choose the Category you want (Men Elite, Women Elite, Men Under 23, Men Juniors).  A list of riders and points is displayed in the center of the screen with the __Rank__, __Name__, __Nation__ and __Points__ headers.
1. Scroll the list to the bottom and choose "All" (make sure you are scrolling the list, not the web page).  This will retrieve all riders worldwide.
1. Scroll the list back to the top.
1. Do not press the __Export to Excel__ button on the UCI page!  The UCI page does not generate a proper Excel file, and all the accents on the rider's names will be corrupted.
1. Rather, carefully click on just to the left of the "R" on the __Rank__ header.
1. While holding down the mouse button, carefully drag to the right across the top row.  When you get to the last column, go a little further until the entire table is selected.
1. Press Ctrl+c to copy your selection from the UCI web page.
1. Return to the "UCI Points" sheet in your spreadsheet.
1. In cell A1 (the first cell in the upper left), do a right click.
1. Then, choose "Paste Special..."
1. Then select __HTTML__, and press OK in the dialog.

That's it!
Please don't email me that this process is needlessly complicated (I know).

If you use the "Download as Excel", the accents of the names will be wrong.  Don't do it.

## UCI Points Matching Logic

But wait a minute...  This data does not have first and last names, only __Name__.  And, it does not have the UCI code, only the __Nation__ and __Age__.

Here is what __CallupSeedingMgr__ does:

1. Gets the First and Last names from the Name - the last name is in all capital letters.
1. Uses a lookup table based the __Nation__ to get the three-letter country code (using ISO 3166).
1. Subtracts the __Age__ from the current year to get the year of birth.
ce
But, this still only gets us the __First Name__, __Last Name__, a __Nation Code__ and a __Year of Birth__.  The best we can do with this is create a partial UCI code of the form "NATYYYY????" - missing the month and day.

This is what __CallupSeedingMgr__ uses.  In practice, it works pretty well.

## UCI Code vs License

If you are doing callups/seeding by __UCI Points__, you __must have__ the __UCI Code__ (that is, the code formed by the first three letters of the Nation, then the 4-digit birth year, 2-digit birth month and 2-digit month day).

If you are not ranking by UCI Points, and all your other information is coded with a License, then you don't need a UCI Code field.

Unfortunately, UCI Codes are not guaranteed to be unique and are difficult to work with.  Probably the worst example of non-unique UCI codes is at a National Junior championship.  All riders are from the same country, and all are ages 17-18.  If there are more than 33 riders, there is a >50% that two will have the same UCI code.  If there are 80 riders, the is a 99% chance that two will have the same UCI code.

Because UCI codes are not guaranteed unique, the first and last name of the rider must be used.  But... riders' names are not always spelled consistently (with accents, without, different vowels, middle middle name, etc.).  This can be difficult for to figure out manually, and is even more difficult for a computer to determine.

At the level of Elite riders, UCI Codes tend to be unique as it is unlikely for two riders from the same country to be both Elite cyclists and have the same birthday.  However, you always have to confirm the name of the rider too.  

The __License__ code is assumed to be a regional or national license code and is assumed to be unique for all riders in the race.

If the __License__ code is present, __CallupSeedingMgr__ will try to match on it.  You should include the __License__ everywhere you know it.

# Matching Issues

There are three types of matching problems:

1. A rider fails to match a criteria, but should (false Negative)
1. A rider successfully matches a criteria, but shouldn't (false Positive)
1. A rider matches more than one row in a criteria (multiple matches)

To avoid matching these issues entirely, use the __License__ code everywhere you can.  If __Registration__ has the __License__ code, and the criteria sheet has a license code, the system will use exact __License__ match.

Matching Issues are shown on the __CallupSeedingMgr__ Screen in the cells.  

Of course, the __UCI Codes__ are more complicated because alone, the do not guarantee uniqueness - we also need to consider the First and Last name.

The problem with names is that they are often not spelled consistently, or have missing accents on the characters.  For example, I have seen my own last name misspelled as follows:

* Sitarski (correct!)
* Setarske
* Sitarsky
* Satirskie

Rather than giving up on misspelled names, __CallupSeedingMgr__ uses a "soundalike" system [Double Metaphone](http://en.wikipedia.org/wiki/Metaphone#Double_Metaphone).
The "Double Metaphone" index will match all the above as the same "soundalike".

But... this can lead to another problems, like thinking two names are the same when they aren't.

Soundalike matches and multiple matches are shown in the grid in Yellow and Orange.  Always click on Yellow and Orange cells to check whether the match is correct.

If not, modify the spreadsheet, save it, then press the __Update__ button.

# Column Header Fields

The following fields are recognized by __CallupSeedingMgr__:

Column Name|Type|Comment
:----|:---|:------
First Name|Matchable|
Last Name|Matchable|
UCI Code|Matchable|Proper UCI code of the form NNNYYYYMMDD where NNN is the 3-character nation code, YYYY=birth year, MM=birth month and DD=month day.
License|Matchable|Regional or National license code.  Must be unique for all riders.  Try to link as much information together using the __License__ field.
Name|Converted|Field where the first name and last name appear together, but the last name is capitalized and the first name is in mixed-case.  The program will automatically convert this to a __First Name__ and __Last Name__ for matching.
Age|Converted|Used to get Birth Year and to form an incomplete UCI code with Nation Code
Nation|Converted|Text of rider's nation (must be compatible with ISO 3166 standard).  If you have the __UCI Code__, don't bother with this.  It is only used form data downloaded from the UCI web site.
Nation Code|Converted|Three-character nation code as specified in ISO 3166.  Used to create UCI Code.  If you have the __UCI Code__, you don't need this.
Date of Birth|Converted|Must be an Excel date.  If you have the __UCI Code__, you don't need this.  If you have __Date of Birth__ and __Nation Code__, the program will automatically create a UCI Code from the two fields.
DOB|Converted|Alias for __Date of Birth__.
Points|Criteria|The number of points awarded to the rider by that criteria.
Position|Criteria|The finish position of the rider by that criteria.
Rank|Criteria|Alias for __Position__
Pos|Criteria|Alias for __Position__
Bib|Informational|Rider's bib number.  Read in the __Registration__ sheet and repeated in the Output.  Not used for matching.
BibNum|Informational|Alias for __Bib__
Team|Informational|Rider's team.  Read in the __Registration__ sheet and repeated in the Output.  Not used for matching.

__Notes:__

* If a sheet has both a __Points__ and __Position__ field, the __Points__ field will be used and the __Position__ field will be ignored.
* If a sheet is missing both a __Points__ and __Position__ field, a __Position__ will be automatically generated equal to the row number in the sheet.

When matching fields, accents are removed, non-ascii characters are removed as are spaces.  Capitalization is ignored.  The following are all equivalent:

* Last Name
* LastName
* LASTNAME
* lastname
* Last-Name
* Last-Name*
* last_name
